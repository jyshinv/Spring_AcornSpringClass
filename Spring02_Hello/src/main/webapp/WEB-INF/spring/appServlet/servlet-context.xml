<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- 
		new InterResourceViewResolver()
		위의 객체를 생성하고
		아래의 setter 메소드를 호출을 하는 설정이다. 
		.setPrefix("/WEB-INF/views/")
		.setSuffix(".jsp")
	 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		[Spring Bean Container 에서 관리할 객체를 생성할 클래스를 찾기]
		찾아지면 알아서 객체를 종류별로 1개(single ton)만 생성해서 관리한다.
		관리한다는 의미는 필요한 곳에 DI(의존성 주입)을 해준다는 의미이다. 
		
		클래스 위에 @Controller, @Service, @Repository, @Component... 등등
		의 어노텡션을 붙여놓으면 component scan할 때 인식이 되어서 
		객체가 자동으로 생성되고 container 에서 관리가 된다. 
		
		base-package="스캔할 패키지명"
		
		패키지명을 명시하면 하위 패키지까지 알아서 다 scan한다. 
		
		Spring을 배운다는 것은 다양한 @@@ 어노테이션들을 사용하는 방법들을 배우는 것이라고 생각하면 된다.
	 -->
	<context:component-scan base-package="com.gura.spring01" />
	
	
	
</beans:beans>
